import os

configfile: "config/config.yaml"

# ================== 基本参数 ==================
SPECIES_NAME = config.get("species_name")
FAMILY = config.get("family")
PREFIX = f"{SPECIES_NAME}_{FAMILY}"  # 修改前缀为物种+家族名称
BASE_DIR = PREFIX  # 创建基础目录

PEP_FA = config.get("pep_fa")
PFAM_HMM = config.get("pfam_hmm")
OUTDIR = f"{BASE_DIR}/{config.get('outdir')}"
EVALUE = float(config.get("evalue", 1e-5))
THREADS = int(config.get("threads", 32))

if not PEP_FA:
    raise SystemExit("config.yaml 缺少 pep_fa，请添加蛋白 fasta 路径")

# ================== BLAST 参数 ==================
BLAST_DIR = f"{BASE_DIR}/{config.get('blast_outdir')}"
TAIR_DOMAINS = config.get("tair_domains")
ARABIDOPSIS_PEP = config.get("arabidopsis_pep")
RICE_PFAM = config.get("rice_pfam")
RICE_PEP = config.get("rice_pep")
PFID = config.get("pfam_id")

BLAST_EVALUE = config.get("blast_evalue", 1e-10)
BLAST_MAX_ALIGN = config.get("blast_max_align", 10)
BLAST_DB_TITLE = config.get("blast_db_title", "TAIR_Rice_DB")
BLAST_DB_PREFIX = f"{BLAST_DIR}/{PREFIX}_TAIR_Rice"
BLAST_OUT = f"{BLAST_DIR}/{PREFIX}.blast"
BLAST_IDS = f"{BLAST_DIR}/{PREFIX}.blast.id"
BLAST_COUNT = f"{BLAST_DIR}/{PREFIX}.blast.count"

TAIR_IDS = f"{BLAST_DIR}/TAIR_{PFID}.id"
RICE_IDS = f"{BLAST_DIR}/Rice_{PFID}.id"
TAIR_PEP_OUT = f"{BLAST_DIR}/TAIR_{PFID}.pep.fa"
RICE_PEP_OUT = f"{BLAST_DIR}/Rice_{PFID}.pep.fa"
COMBINED_PEP = f"{BLAST_DIR}/TAIR_Rice_{PFID}.pep.fa"
COUNT_FILE = f"{BLAST_DIR}/TAIR_Rice_{PFID}.count"

# ================== Pfam / Identification ==================
ID_DIR = f"{BASE_DIR}/{config.get('ident_dir')}"
PFAM_A_HMM = config.get("pfam_a_hmm")
PFAM_SCAN_OUT = f"{ID_DIR}/{PREFIX}_Pfam_scan.out"
PFAM_SCAN_ID = f"{ID_DIR}/{PREFIX}_pfam_scan.id"
PFAM_SCAN_PEP = f"{ID_DIR}/{PREFIX}_pfam_scan.pep.fa"
GFF3 = config.get("gff3")
GENE_INFO_OUT = f"{ID_DIR}/{PREFIX}_gene_info.txt"
PFAM_INFO_OUT = f"{ID_DIR}/{PREFIX}_pfam_scan_info.xlsx"
COMBINED_OUT = f"{ID_DIR}/{PREFIX}_combined_gene_pep_info.xlsx"

# ================== 脚本路径 ==================
GET_GENEINFO_SCRIPT = config.get("get_geneinfo_script")
PLANT_MPLOC_SCRIPT = config.get("plant_mploc_script")
PFAM_SCAN_SCRIPT = config.get("pfam_scan_script")
EXTRACT_MEME_SCRIPT = config.get("extract_meme_script")

# ================== 输出文件 ==================
FIRST_DOM = f"{OUTDIR}/{PREFIX}.domtblout"
FIRST_HMMOUT = f"{OUTDIR}/{PREFIX}.hmmout"
FIRST_IDS = f"{OUTDIR}/{PREFIX}.filter.1st"
FIRST_FA = f"{OUTDIR}/{PREFIX}_1st_id.fa"
FIRST_ALN = f"{OUTDIR}/{PREFIX}_1st_id.aln"
NEW_HMM = f"{OUTDIR}/{PREFIX}_new_{FAMILY}.hmm"
SECOND_DOM = f"{OUTDIR}/{PREFIX}_new_{FAMILY}.domtblout"
SECOND_HMMOUT = f"{OUTDIR}/{PREFIX}_new_{FAMILY}.hmmout"
SECOND_IDS = f"{OUTDIR}/{PREFIX}_new_{FAMILY}.filter.2st"
SECOND_FA = f"{OUTDIR}/{PREFIX}_2st_id.fa"
HMM_BLAST_ID = f"{ID_DIR}/{PREFIX}_hmm_blast.id"
HMM_BLAST_PEP = f"{ID_DIR}/{PREFIX}_hmm_blast.pep.fa"

# ================== Tree ==================
TREE_DIR = f"{BASE_DIR}/{config.get('tree_dir', '6.tree')}"
SINGLE_SPECIES_FA = f"{TREE_DIR}/{PREFIX}_pfam_scan.pep.fa"
MULTI_SPECIES_FA = f"{TREE_DIR}/{PREFIX}_3_species.pep.fa"
SINGLE_MUSCLE = f"{TREE_DIR}/{PREFIX}_pfam_scan.pep.muscle"
MULTI_MUSCLE = f"{TREE_DIR}/{PREFIX}_3_species.pep.muscle"
TREE_SINGLE = f"{TREE_DIR}/{PREFIX}_pfam_scan.pep.muscle.treefile"
TREE_MULTI = f"{TREE_DIR}/{PREFIX}_3_species.pep.muscle.treefile"

# ================== Motif ==================
MOTIF_DIR = f"{BASE_DIR}/{config.get('motif_dir')}"
MEME_LOCATION = f"{MOTIF_DIR}/{PREFIX}_meme_location.txt"

# ================== Workflow Rules ==================
rule all:
    input:
        FIRST_IDS,
        FIRST_FA,
        FIRST_ALN,
        NEW_HMM,
        SECOND_IDS,
        SECOND_FA,
        COMBINED_PEP,
        BLAST_DB_PREFIX + ".db.done",
        BLAST_OUT,
        BLAST_IDS,
        BLAST_COUNT,
        HMM_BLAST_ID,
        HMM_BLAST_PEP,
        PFAM_SCAN_OUT,
        PFAM_SCAN_ID,
        PFAM_SCAN_PEP,
        GENE_INFO_OUT,
        PFAM_INFO_OUT,
        COMBINED_OUT,
        MEME_LOCATION

# 创建基础目录
rule create_base_dir:
    output: directory(BASE_DIR)
    shell: "mkdir -p {output}"

# ================== HMM 搜索流程 ==================
rule hmmsearch_initial:
    input:
        PEP_FA  # 仅使用文件输入，而不是目录
    output:
        dom = f"{BASE_DIR}/2.hmmsearch/{PREFIX}.domtblout",  # 输出路径位于子目录中
        out = f"{BASE_DIR}/2.hmmsearch/{PREFIX}.hmmout"  # 输出路径位于子目录中
    params: pfam = PFAM_HMM
    threads: THREADS
    shell:
        # 使用 $(dirname) 来提取目录路径并创建目录
        "mkdir -p $(dirname {output.dom}) && "
        "hmmsearch --cut_tc --domtblout {output.dom} -o {output.out} {params.pfam} {input[0]}"

rule parse_dom_initial:
    input: FIRST_DOM
    output: FIRST_IDS
    params: evalue=EVALUE
    shell:
        "awk '$7<{params.evalue} && $1 !~ /^#/ {{print $1}}' {input} | sort -u > {output}"

rule extract_first:
    input:
        db=PEP_FA,
        ids=FIRST_IDS
    output: FIRST_FA
    shell: "seqkit grep -r -f {input.ids} {input.db} -o {output}"

rule clustalw_align:
    input: FIRST_FA
    output: FIRST_ALN
    threads: 2
    shell: "clustalw -infile={input} -output=clustal -type=PROTEIN -outfile={output}"

rule hmmbuild:
    input: FIRST_ALN
    output: NEW_HMM
    shell: "hmmbuild {output} {input}"

rule hmmsearch_second:
    input:
        hmm=NEW_HMM,
        db=PEP_FA
    output:
        dom=SECOND_DOM,
        out=SECOND_HMMOUT
    threads: THREADS
    shell: "hmmsearch --domtblout {output.dom} -o {output.out} {input.hmm} {input.db}"

rule parse_dom_second:
    input: SECOND_DOM
    output: SECOND_IDS
    params: evalue=EVALUE
    shell: "awk '$7<{params.evalue} && $1 !~ /^#/ {{print $1}}' {input} | sort -u > {output}"

rule extract_second:
    input:
        db=PEP_FA,
        ids=SECOND_IDS
    output: SECOND_FA
    shell: "seqkit grep -r -f {input.ids} {input.db} -o {output}"

# ================== BLAST / 植物家族提取 ==================
rule make_blast_dir:
    output: f"{BLAST_DIR}/.dir_created"  # 修改为输出文件，而非目录
    shell:
        """
        set -x
        echo "Creating directory: {BLAST_DIR}"
        mkdir -p {BLAST_DIR} && touch {output}  # 在目录中创建标记文件
        """

rule extract_tair_ids:
    input:
        TAIR_DOMAINS,
        BLAST_DIR + "/.dir_created"
    output: TAIR_IDS
    params: pfid=PFID
    shell: "grep '{params.pfid}' {input[0]} | awk '{{print $1}}' | awk -F '.' '{{print $1}}' | sort | uniq > {output}"

rule extract_tair_pep:
    input:
        ids=TAIR_IDS,
        db=ARABIDOPSIS_PEP
    output: TAIR_PEP_OUT
    shell: "seqkit grep -r -f {input.ids} {input.db} -o {output}"

rule extract_rice_ids:
    input:
        RICE_PFAM,
        BLAST_DIR + "/.dir_created"
    output: RICE_IDS
    params: pfid=PFID
    shell: "grep '{params.pfid}' {input[0]} | awk '{{print $1}}' | sort | uniq > {output}"

rule extract_rice_pep:
    input:
        ids=RICE_IDS,
        db=RICE_PEP
    output: RICE_PEP_OUT
    shell: "seqkit grep -r -f {input.ids} {input.db} -o {output}"

rule combine_plant_pep:
    input:
        tair=TAIR_PEP_OUT,
        rice=RICE_PEP_OUT,
        dir_marker=BLAST_DIR + "/.dir_created"
    output:
        combined=COMBINED_PEP,
        count_file=COUNT_FILE
    shell: "cat {input.tair} {input.rice} > {output.combined} && grep -c '^>' {output.combined} > {output.count_file}"

rule makeblastdb:
    input:
        COMBINED_PEP,
        BLAST_DIR + "/.dir_created"
    output: marker=BLAST_DB_PREFIX + ".db.done"
    shell:
        f"""
        makeblastdb -in {{input[0]}} -dbtype prot -title {BLAST_DB_TITLE} -parse_seqids -out {BLAST_DB_PREFIX} && \
        touch {{output.marker}}
        """

rule blastp_search:
    input:
        query=PEP_FA,
        db_marker=BLAST_DB_PREFIX + ".db.done"
    output: BLAST_OUT
    threads: THREADS
    params: db_prefix=BLAST_DB_PREFIX, evalue=BLAST_EVALUE, maxal=BLAST_MAX_ALIGN
    shell: "blastp -query {input.query} -db {params.db_prefix} -outfmt '6 std qlen slen' -out {output} -evalue {params.evalue} -num_threads {threads} -num_alignments {params.maxal}"

rule blast_filter:
    input: BLAST_OUT
    output:
        ids=BLAST_IDS,
        count_file=BLAST_COUNT
    shell: "awk '{{print $1}}' {input} | sort | uniq > {output.ids} && wc -l {output.ids} > {output.count_file}"

rule combine_hmm_blast_ids:
    input:
        hmm=SECOND_IDS,
        blast=BLAST_IDS
    output: HMM_BLAST_ID
    shell: "mkdir -p {ID_DIR} && cat {input.hmm} {input.blast} | sort | uniq > {output}"

rule extract_hmm_blast_pep:
    input:
        ids=HMM_BLAST_ID,
        db=PEP_FA
    output: HMM_BLAST_PEP
    shell: "mkdir -p {ID_DIR} && seqkit grep -r -f {input.ids} {input.db} -o {output}"

# ================== Pfam 扫描 ==================
rule hmmpress_pfam:
    input: PFAM_A_HMM
    output:
        PFAM_A_HMM + ".h3f",
        PFAM_A_HMM + ".h3i",
        PFAM_A_HMM + ".h3m",
        PFAM_A_HMM + ".h3p"
    log: "1.database/hmmpress.log"
    shell: "hmmpress {input} > {log} 2>&1"

rule pfam_scan:
    input:
        pep = HMM_BLAST_PEP,
        hmm = expand(PFAM_A_HMM + ".{ext}", ext=["h3f", "h3i", "h3m", "h3p"])
    output: PFAM_SCAN_OUT
    log: f"{ID_DIR}/{PREFIX}_Pfam_scan.log"
    shell: 
        """
	source /hpcfile/users/92024269/cx/software/miniconda3/etc/profile.d/conda.sh
	conda activate pfam_scan
        mkdir -p {ID_DIR} && pfam_scan.pl -fasta {input[0]} -dir 1.database -cpu 8 -out {output} > {log} 2>&1
	conda deactivate
	conda activate genefamily
        """


rule parse_pfam_scan:
    input: PFAM_SCAN_OUT
    output: PFAM_SCAN_ID
    params: pfid=PFID
    shell: "grep '{params.pfid}' {input} | awk '{{print $1}}' | sort | uniq > {output}"

rule extract_pfam_pep:
    input:
        ids=PFAM_SCAN_ID,
        db=PEP_FA
    output: PFAM_SCAN_PEP
    shell: "seqkit grep -r -f {input.ids} {input.db} -o {output}"

# ================== Gene Info ==================
rule get_gene_info:
    input:
        ids=PFAM_SCAN_ID,
        gff=GFF3
    output: GENE_INFO_OUT
    params: script=GET_GENEINFO_SCRIPT
    shell: "python3 {params.script} --arg1 {input.ids} --arg2 {input.gff} --arg3 {output}"

rule compute_pep_properties:
    input:
        pfam_pep=PFAM_SCAN_PEP  # 输入文件
    output:
        pfam_info=PFAM_INFO_OUT  # 输出文件
    params:
        script="scripts/compute_pep_properties.R"  # 脚本路径
    shell:
        "Rscript {params.script} {input.pfam_pep} {output.pfam_info}"

rule combine_gene_pep_info:
    input:
        gene=GENE_INFO_OUT,
        pep=PFAM_INFO_OUT
    output:
        combined=COMBINED_OUT
    params:
        script="scripts/combine_gene_pep_info.py"
    shell:
        """
        python {params.script} {input.gene} {input.pep} {output.combined}
        """

# ================== Tree ==================
rule prepare_tree_data:
    input:
        single_pep = PFAM_SCAN_PEP,
        tair_rice_pep = COMBINED_PEP
    output:
        single=SINGLE_SPECIES_FA,
        multi=MULTI_SPECIES_FA
    shell:
        """
        mkdir -p {TREE_DIR}
        cp {input.single_pep} {output.single}
        cat {input.single_pep} {input.tair_rice_pep} > {output.multi}
        """

rule muscle_single:
    input:
        SINGLE_SPECIES_FA
    output:
        SINGLE_MUSCLE
    log:
        f"{TREE_DIR}/{PREFIX}_pfam_scan.pep.muscle.log"
    threads:
        THREADS
    shell:
        """
        mkdir -p {TREE_DIR}
        muscle -super5 {input} -output {output} -threads {threads} > {log} 2>&1
        """

rule muscle_multi:
    input:
        MULTI_SPECIES_FA
    output:
        MULTI_MUSCLE
    log:
        f"{TREE_DIR}/{PREFIX}_3_species.pep.muscle.log"
    threads:
        THREADS
    shell:
        """
        mkdir -p {TREE_DIR}
        muscle -super5 {input} -output {output} -threads {threads} > {log} 2>&1
        """

rule iqtree_single:
    input: SINGLE_MUSCLE
    output: TREE_SINGLE
    log: f"{TREE_DIR}/{PREFIX}_iqtree_single.log"
    threads: THREADS
    shell: "iqtree -s {input} -m MFP -bb 1000 -bnni -nt AUTO -cmax 15 -redo > {log} 2>&1"

rule iqtree_multi:
    input: MULTI_MUSCLE
    output: TREE_MULTI
    log: f"{TREE_DIR}/{PREFIX}_iqtree_multi.log"
    threads: THREADS
    shell: "iqtree -s {input} -m MFP -bb 1000 -bnni -nt AUTO -cmax 15 -redo > {log} 2>&1"

rule plot_tree_single:
    input:
        treefile = TREE_SINGLE
    output:
        tree_p=f"{TREE_DIR}/{PREFIX}_phylogenetic_tree.png"
    threads: 8
    shell:
        """
        Rscript scripts/plot_tree.R {input.treefile} {output.tree_p}
        """

rule plot_tree_multi:
    input:
        tree = TREE_MULTI
    output:
        plot = f"{TREE_DIR}/{PREFIX}_multi_species_tree.png"
    log:
        f"{TREE_DIR}/{PREFIX}_plot_tree_multi.log"
    shell:
        """
        Rscript scripts/plot_tree.R {input.tree} {output.plot} > {log} 2>&1
        """

# ================== Motif ==================
rule run_meme:
    input:
        pep=PFAM_SCAN_PEP
    output:
        motif=MEME_LOCATION
    threads: 8
    shell:
        """
        mkdir -p {MOTIF_DIR}
        meme {input.pep} -protein -mod anr -nmotifs 15 -minw 10 -maxw 200 -oc {MOTIF_DIR} > /dev/null 2>&1
        python {EXTRACT_MEME_SCRIPT} --input {MOTIF_DIR}/meme.txt --output {output.motif}
        """